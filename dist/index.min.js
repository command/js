!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).command=e()}(this,(function(){"use strict";const t=require("axios");return class{constructor(t,e={}){t||this._throwFormattedError("A valid API key is required."),this.apiKey=t,this.version="0.43.0",this.customerId=e.customerId||null,this.debug=e.debug||!1,this.customers={login:this._loginCustomer.bind(this),logout:this._logoutCustomer.bind(this),create:this._createCustomer.bind(this),update:this._updateCustomer.bind(this),delete:this._deleteCustomer.bind(this)}}_logDebugMessage(t){console.log("[[[ Command.js DEBUG ]]]"),console.log(t)}_throwFormattedError(t){throw new Error(`[Command] ${t} See https://portal.oncommand.io/docs/command-js/${this.version}/introduction.`)}_request(e,s,r={}){return this.debug&&this._logDebugMessage({method:e,url:`https://api.oncommand.io/v1${s}`,headers:{"x-api-key":this.apiKey},data:r}),t({method:e,url:`https://api.oncommand.io/v1${s}`,headers:{"x-api-key":this.apiKey},data:r}).then(t=>t&&t.data&&t.data.data).catch(t=>{if(t&&t.response){const{status:e}=t.response,s=t.response&&t.response.data&&t.response.data&&t.response.data.data&&t.response.data.data.error;console.warn(`[${e}] ${s}`),t.response.data&&console.warn(t.response.data),this.debug&&t.response.data&&t.response.data.data&&(this._logDebugMessage(t.response.data.data.error),this._logDebugMessage(t.response.data.data.validationErrors))}})}track(t,e){if(!t)throw new Error("Must pass a key to track.");const s={key:t};return this.customerId&&(s.customerId=this.customerId),e&&(s.properties=e),this._request("post","/behavior",s)}_loginCustomer(t){if(!t)throw new Error("Must pass a customerId.");return this.customerId=t,this._request("put","/customers/login",{customerId:t})}_logoutCustomer(t){if(!t&&!this.customerId)throw new Error("Must have a customerId to logout.");return this._request("put","/customers/logout",{customerId:t||this.customerId},()=>{this.customerId=null})}_createCustomer(t){if(!t)throw new Error("Must pass a customer.");return this._request("post","/customers",{...t})}_updateCustomer(t,e){if(!t)throw new Error("Must pass a customerId.");if(!e)throw new Error("Must pass an update for the customer.");return this._request("put",`/customers/${t}`,{...e})}_deleteCustomer(t){if(!t)throw new Error("Must pass a customerId.");return this._request("delete",`/customers/${t}`)}}}));
